#!/usr/bin/env python3

import argparse
from sourcepredictlib.forest import sourceforest
from sourcepredictlib import utils
import os
import warnings


def _get_args():
    '''This function parses and return arguments passed in'''
    parser = argparse.ArgumentParser(
        prog='SourcePredict v' + str(version),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=f'''
==========================================================
SourcePredict v{version}
Coprolite source classification
Author: Maxime Borry
Contact: <borry[at]shh.mpg.de>
Homepage & Documentation: github.com/maxibor/sourcepredict
==========================================================
        ''')
    parser.add_argument('otu_table', help="path to otu table in csv format")
    parser.add_argument(
        '-a',
        dest="alpha",
        default=0.1,
        help="Proportion of sink sample in unknown. Default = 0.1")
    parser.add_argument(
        '-s',
        dest="sources",
        default=os.path.dirname(os.path.abspath(
            __file__))+'/data/sourcepredict_sources.csv',
        help="Path to source csv file. Default = data/sourcepredict_sources.csv")
    parser.add_argument(
        '-l',
        dest="labels",
        default=os.path.dirname(os.path.abspath(
            __file__)) + '/data/sourcepredict_labels.csv',
        help="Path to labels csv file. Default = data/sourcepredict_labels.csv")
    parser.add_argument(
        '-r',
        dest="ratio",
        default='human',
        help="Target organism for ratio calculation. Default = 'Homo_sapiens'")
    parser.add_argument(
        '-n',
        dest="normalization",
        default='RLE',
        help="Normalization method (RLE | CLR | Subsample). Default = RLE")
    parser.add_argument(
        '-o',
        dest="output",
        default=None,
        help="Output file basename. Default = <sample_basename>.sourcepredict.csv")
    parser.add_argument(
        '-se',
        dest="seed",
        default=None,
        help="Seed for random generator. Default = None (randomly generated)")
    parser.add_argument(
        '-k',
        dest="kfold",
        default=3,
        help="Number of fold for K-fold cross validation in feature selection and parameter optimization. Default = 3")
    parser.add_argument(
        '-t',
        dest="threads",
        default=2,
        help="Number of threads for parallel processing. Default = 2")

    args = parser.parse_args()

    sink = args.otu_table
    alpha = args.alpha
    normalization = args.normalization
    ratio = args.ratio
    sources = args.sources
    labels = args.labels
    seed = args.seed
    output = args.output
    kfold = args.kfold
    threads = int(args.threads)

    return(sink, alpha, normalization, sources, labels, ratio, seed, output, kfold, threads)


if __name__ == "__main__":
    version = "0.1.1"
    warnings.filterwarnings("ignore")
    SINK, ALPHA, NORMALIZATION, SOURCES, LABELS, RATIO, SEED, OUTPUT, KFOLD, THREADS = _get_args()
    SEED = utils.check_gen_seed(SEED)
    NORMALIZATION = utils.check_norm(NORMALIZATION)
    a = sourceforest(source=SOURCES, sink=SINK, labels=LABELS)
    a.add_unknown(alpha=ALPHA)
    a.normalize(method=NORMALIZATION)
    a.select_features(cv=KFOLD)
    if OUTPUT is None:
        OUTPUT = f"{utils._get_basename(SINK)}.sourcepredict.csv"
    a.rndForest(seed=SEED, threads=THREADS, ratio=RATIO,
                outfile=OUTPUT, kfold=KFOLD)
